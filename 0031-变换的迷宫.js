/**
 * @param {string[][]} maze
 * @return {boolean}
 */
// WIP
 var escapeMaze = function(maze) {
    const N = maze[0][0].length
    const M = maze[0].length
    const stack = [[0, 0, 0, 1, 1, -1, -1]] // [[t, x, y, TEMP, PERM, okX, okY]]
    while (stack.length) {
        const position = stack.pop()
        const t = position[0]
        const x = position[1]
        const y = position[2]
        if (x === M - 1 && y === N - 1) {
            return true
        }
        if (t + 1 >= maze.length || maze.length-1-t < M-1-x + N-1 -y) {
            continue
        }

        if (maze[t + 1][x].charAt(y) === '.') {
            stack.push([t + 1, x, y, position[3], position[4], position[5], position[6]])
        } else if (maze[t + 1][x].charAt(y) === '#') {
            if (x === position[5] && y === position[6]) {
                stack.push([t+1, x, y, position[3], position[4], position[5], position[6]])
            } else {
                if (position[3]) {
                    stack.push([t+1, x, y, 0, position[4], position[5], position[6]])
                }
                if(position[4]) {
                    stack.push([t+1, x, y, position[3], 0, x, y])
                }
            }
        }

        if (x - 1 >=0 && maze[t + 1][x-1].charAt(y) === '.') {
            stack.push([t + 1, x - 1, y, position[3], position[4], position[5], position[6]])
        } else if (x - 1 >=0 && maze[t + 1][x-1].charAt(y) === '#') {
            if (x-1 === position[5] && y === position[6]) {
                stack.push([t+1, x-1, y, position[3], position[4], position[5], position[6]])
            } else {
                if (position[3]) {
                    stack.push([t+1, x - 1, y, 0, position[4], position[5], position[6]])
                }
                if(position[4]) {
                    stack.push([t+1, x - 1, y, position[3], 0, x-1, y])
                }
            }
            
        }

        if (x + 1 < M && maze[t + 1][x+1].charAt(y) === '.') {
            stack.push([t + 1, x + 1, y, position[3], position[4], position[5], position[6]])
        } else if (x + 1 < M && maze[t +1][x+1].charAt(y) === '#') {
            if (x+1 === position[5] && y === position[6]) {
                stack.push([t+1, x+1, y, position[3], position[4], position[5], position[6]])
            } else {
                if (position[3]) {
                    stack.push([t+1, x + 1, y, 0, position[4], position[5], position[6]])
                }
                if(position[4]) {
                    stack.push([t+1, x + 1, y, position[3], 0, x+1, y])
                }
            }
            
        }

        if (y - 1 >=0 && maze[t+1][x].charAt(y-1) === '.') {
            stack.push([t + 1, x, y - 1, position[3], position[4], position[5], position[6]])
        } else if (y - 1 >=0 && maze[t+1][x].charAt(y-1) === '#') {
            if (x === position[5] && y-1 === position[6]) {
                stack.push([t+1, x, y-1, position[3], position[4], position[5], position[6]])
            } else {
                if (position[3]) {
                    stack.push([t+1, x, y-1, 0, position[4], position[5], position[6]])
                }
                if(position[4]) {
                    stack.push([t+1, x, y-1, position[3], 0, x, y-1])
                }
            }
            
        }

        if (y + 1 < N && maze[t+1][x].charAt(y + 1) === '.') {
            stack.push([t + 1, x, y + 1, position[3], position[4], position[5], position[6]])
        } else if (y + 1 < N && maze[t+1][x].charAt(y + 1) === '#') {
            if (x === position[5] && y+1 === position[6]) {
                stack.push([t+1, x, y+1, position[3], position[4], position[5], position[6]])
            } else {
                if (position[3]) {
                    stack.push([t+1, x, y+1, 0, position[4], position[5], position[6]])
                }
                if(position[4]) {
                    stack.push([t+1, x, y+1, position[3], 0, x, y+1])
                }
            }
            
        }

    }
    
    return false
    
};
console.log(escapeMaze(
    [["...",".##","##.","#.#",".##","...",".#.","##.","##."],[".##","###","##.",".##",".##","##.",".#.","###","##."],[".##","###","###",".##","##.","##.","#.#","###",".#."],[".##","#.#",".##","#.#","###","#.#","###","...",".#."],["..#","###","#..",".##",".##","..#",".#.","###",".#."],["..#",".#.","..#",".##","###","#.#","#..","###","##."],[".##","..#",".##",".#.","##.","###","##.","###","##."],[".##","..#","#.#",".##","###",".##","##.",".##","#.."],["...","##.","#.#","..#","##.","..#",".##","#.#","##."],[".##","###","###","#.#",".##",".##","###","###","#.."],["..#","###","..#","#..",".#.","###","#.#","###",".#."],["..#","###","##.","##.",".#.","#..","###","##.",".#."],[".##","#.#",".#.",".##",".#.","###",".#.","###","##."],[".#.","#.#",".##","#..","#.#","##.","###","###","##."],["..#","###","###","###","##.",".#.","##.","###","##."],["..#","#..",".#.","##.","###","...",".##","#.#",".#."],[".##","###",".##",".##","###","#..","###","...",".#."],[".##",".##","##.","#..","###","..#","...","###","##."],[".##","#..","###","###","##.","#..",".##","..#","##."],["...",".#.","###","###","###","###","##.","#.#",".#."],[".##",".#.","#..","#.#","###","##.",".#.","###",".#."],["..#","###","###","###","#.#","##.","##.","#.#","#.."],["...","###","###","##.","#.#",".#.","#.#","#..",".#."],[".##","..#","##.",".##","###","#..","#.#","#.#","##."],["..#","###","###","##.",".##",".##","#.#","#..",".#."],["..#","..#","#..","...",".##","##.","#.#","##.","##."],[".#.","##.","#.#","##.","#.#","##.","###",".#.","##."],[".#.","###","..#","###",".##","..#",".#.","###","##."],[".#.","###","###","##.","###",".##","##.","##.",".#."],[".#.",".##","###",".#.",".#.",".#.","###","###","..."],[".##","#.#",".##","###","###",".##",".##",".##","##."],["..#","##.",".#.",".##","###","###","###",".##","##."],[".#.",".##","##.","#..","###",".#.",".#.","#.#","##."],[".#.","###","...","###","##.",".#.","#.#",".##","##."],["..#","#..","#.#",".##","###","##.",".#.","##.","##."],["..#","##.","###","###","#..","##.","##.",".##","##."],["..#","###",".##","..#",".#.",".##",".##","###",".#."],["..#",".#.",".##",".#.",".#.",".##","#.#","##.","##."],["..#","###","#..","...","#..",".##","..#",".##","..."],[".##","###","#..","###","#.#","##.","#..","###","##."]]))